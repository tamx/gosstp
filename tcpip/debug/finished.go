package main

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/hmac"
	"crypto/sha256"
	"crypto/tls"
	_ "crypto/tls"
	"encoding/hex"

	"crypto/x509"
	"fmt"
	"log"
)

var finishedbytes = []byte{
	0x16, 0x03, 0x03, 0x00, 0x28, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x46, 0x6d,
	0xdf, 0x32, 0xc2, 0x2c, 0x96, 0xf0, 0xf0, 0x52,
	0x6e, 0x26, 0xc7, 0xce, 0xe5, 0x9b, 0x62, 0x96,
	0xcf, 0xc5, 0xc7, 0x8c, 0x2b, 0xb3, 0x3f, 0x53,
	0xbb, 0x13, 0x7e, 0x36, 0xcd,
}

var clienthello = []byte{
	0x01, 0x00, 0x00, 0x9a, 0x03, 0x03, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x4f, 0x00,
	0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x1d,
	0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x0b,
	0x00, 0x02, 0x01, 0x00, 0x00, 0x0d, 0x00, 0x1a,
	0x00, 0x18, 0x08, 0x04, 0x04, 0x03, 0x08, 0x07,
	0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01,
	0x06, 0x01, 0x05, 0x03, 0x06, 0x03, 0x02, 0x01,
	0x02, 0x03, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00,
	0x12, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x07, 0x06,
	0x03, 0x03, 0x03, 0x02, 0x03, 0x01,
}

var serverHello = []byte{
	0x02, 0x00, 0x00, 0x33, 0x03, 0x03, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x9c, 0x00, 0x00, 0x0b, 0xff, 0x01, 0x00, 0x01,
	0x00, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00,
}

var serverCertificate = []byte{
	0x0b, 0x00, 0x04, 0x21, 0x00, 0x04, 0x1e, 0x00,
	0x04, 0x1b, 0x30, 0x82, 0x04, 0x17, 0x30, 0x82,
	0x02, 0x7f, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02,
	0x0f, 0x05, 0x9a, 0xc2, 0x23, 0x5f, 0x09, 0xf0,
	0xf8, 0x06, 0x6c, 0x15, 0x44, 0xed, 0x1a, 0x6e,
	0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
	0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30,
	0x5b, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55,
	0x04, 0x0a, 0x13, 0x15, 0x6d, 0x6b, 0x63, 0x65,
	0x72, 0x74, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x43,
	0x41, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55,
	0x04, 0x0b, 0x0c, 0x0f, 0x73, 0x61, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x40, 0x73, 0x61, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x31, 0x1f, 0x30, 0x1d, 0x06,
	0x03, 0x55, 0x04, 0x03, 0x0c, 0x16, 0x6d, 0x6b,
	0x63, 0x65, 0x72, 0x74, 0x20, 0x73, 0x61, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x40, 0x73, 0x61, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x30, 0x1e, 0x17, 0x0d,
	0x32, 0x32, 0x30, 0x34, 0x30, 0x32, 0x30, 0x32,
	0x34, 0x39, 0x30, 0x38, 0x5a, 0x17, 0x0d, 0x32,
	0x34, 0x30, 0x37, 0x30, 0x32, 0x30, 0x32, 0x34,
	0x39, 0x30, 0x38, 0x5a, 0x30, 0x43, 0x31, 0x27,
	0x30, 0x25, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
	0x1e, 0x6d, 0x6b, 0x63, 0x65, 0x72, 0x74, 0x20,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x31,
	0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0b,
	0x0c, 0x0f, 0x73, 0x61, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x40, 0x73, 0x61, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06,
	0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
	0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f,
	0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01,
	0x01, 0x00, 0xc7, 0x08, 0x44, 0x0e, 0x30, 0x7a,
	0x7e, 0x8c, 0x40, 0xd6, 0x86, 0xbe, 0x0a, 0x25,
	0x8b, 0x3b, 0xd2, 0x64, 0xec, 0x02, 0x5c, 0xfa,
	0x65, 0x1e, 0x16, 0xbc, 0xf2, 0x2c, 0xd1, 0x1b,
	0xc4, 0x4f, 0xb9, 0xbb, 0x5e, 0x29, 0xe3, 0x61,
	0xbf, 0x06, 0x12, 0x72, 0x73, 0x38, 0x62, 0x57,
	0x83, 0x20, 0x02, 0x97, 0xf3, 0xf5, 0xe7, 0xbc,
	0x83, 0xab, 0xff, 0x25, 0xf4, 0xb2, 0xa3, 0x78,
	0x3f, 0x8e, 0xd6, 0xbf, 0xdf, 0xf9, 0x5b, 0x1d,
	0x50, 0x49, 0x0f, 0x99, 0x01, 0x25, 0xe7, 0xa4,
	0x9c, 0xfa, 0xc3, 0x5d, 0xe2, 0x2e, 0xb6, 0x9a,
	0x1c, 0x43, 0x81, 0x84, 0x78, 0x0c, 0x71, 0xd8,
	0x80, 0x80, 0x51, 0x06, 0xd9, 0xbd, 0xcb, 0xca,
	0x5b, 0x53, 0x18, 0x36, 0x15, 0xd9, 0xb4, 0x50,
	0x12, 0x35, 0x17, 0xbf, 0x9d, 0xfa, 0x4e, 0x90,
	0x7c, 0x2e, 0x23, 0xab, 0xff, 0x60, 0x4a, 0xbb,
	0xf9, 0x7e, 0xc3, 0x3d, 0xf0, 0x15, 0x4f, 0x7a,
	0x0c, 0x6c, 0x0e, 0xae, 0xf7, 0x74, 0x0b, 0xc1,
	0x4f, 0x81, 0x0f, 0x47, 0xdb, 0x90, 0x48, 0x04,
	0xb9, 0x2a, 0x7d, 0xb3, 0x7f, 0x1b, 0xff, 0x46,
	0x0b, 0x48, 0x6f, 0x9f, 0x8b, 0xc7, 0x9f, 0x72,
	0xe0, 0x99, 0xfb, 0x07, 0x57, 0xb0, 0xe4, 0x47,
	0x2f, 0x28, 0x01, 0x96, 0x88, 0xc5, 0xa4, 0x75,
	0x90, 0xff, 0x1e, 0xc0, 0x77, 0xf7, 0x75, 0x42,
	0x27, 0x10, 0x4c, 0xfa, 0xa9, 0x67, 0x40, 0x74,
	0xc4, 0xc2, 0xf9, 0x45, 0x8c, 0x7d, 0x67, 0x45,
	0x60, 0x9a, 0xd5, 0xdb, 0x22, 0x1a, 0x47, 0x3e,
	0xdb, 0x3e, 0xd9, 0x03, 0x27, 0x13, 0x22, 0x8a,
	0x27, 0x8f, 0x3d, 0x0b, 0x81, 0xec, 0x65, 0x85,
	0xb9, 0xf3, 0xb7, 0x78, 0x78, 0x89, 0xcf, 0x3d,
	0xd1, 0x11, 0x94, 0xcf, 0x7c, 0xb4, 0x09, 0xbe,
	0xa5, 0x03, 0x58, 0x2c, 0x7b, 0x28, 0x54, 0x90,
	0xaa, 0x57, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3,
	0x70, 0x30, 0x6e, 0x30, 0x0e, 0x06, 0x03, 0x55,
	0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03,
	0x02, 0x05, 0xa0, 0x30, 0x13, 0x06, 0x03, 0x55,
	0x1d, 0x25, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08,
	0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01,
	0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04,
	0x18, 0x30, 0x16, 0x80, 0x14, 0x04, 0xd9, 0x8d,
	0x95, 0x14, 0x3b, 0x1c, 0x11, 0x5a, 0xcc, 0x6c,
	0xa9, 0x86, 0x00, 0x02, 0x53, 0xe9, 0xc9, 0xfe,
	0xb4, 0x30, 0x26, 0x06, 0x03, 0x55, 0x1d, 0x11,
	0x04, 0x1f, 0x30, 0x1d, 0x82, 0x0a, 0x6d, 0x79,
	0x2d, 0x74, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x82, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68,
	0x6f, 0x73, 0x74, 0x87, 0x04, 0x7f, 0x00, 0x00,
	0x01, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
	0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
	0x03, 0x82, 0x01, 0x81, 0x00, 0x27, 0xd1, 0x65,
	0x59, 0x62, 0xc4, 0xf6, 0x48, 0xa7, 0x97, 0x35,
	0xdf, 0xc3, 0x14, 0x61, 0xdb, 0x16, 0xb9, 0x2f,
	0x2a, 0x84, 0x9d, 0x37, 0x88, 0x6e, 0x35, 0x3e,
	0xe6, 0x7a, 0x94, 0xd4, 0xd0, 0xf8, 0x5b, 0x8c,
	0x20, 0xe2, 0x20, 0x71, 0x80, 0xd3, 0x7a, 0xf5,
	0x51, 0xa0, 0xa0, 0x40, 0xca, 0xc7, 0x3e, 0x5d,
	0x7c, 0xf4, 0x74, 0xb7, 0x8e, 0x6d, 0x81, 0x9a,
	0xfa, 0x54, 0x3c, 0x33, 0x4b, 0x2a, 0x94, 0x9f,
	0x3e, 0xf5, 0xf4, 0x5f, 0x33, 0xe8, 0xc0, 0x7f,
	0x0e, 0x43, 0xe4, 0xd5, 0xf9, 0x4f, 0x11, 0xc3,
	0x3d, 0x72, 0x6d, 0x32, 0x45, 0x8b, 0x87, 0xc8,
	0x2b, 0xbb, 0xa1, 0x2f, 0xa1, 0xf9, 0x7a, 0xeb,
	0xdd, 0xdc, 0xf5, 0x04, 0x6c, 0x45, 0x0f, 0xce,
	0xf3, 0x0e, 0x08, 0xe7, 0xbc, 0x37, 0x1d, 0x30,
	0x0a, 0x0c, 0x48, 0xf9, 0x1f, 0xe4, 0xb1, 0xb5,
	0x1d, 0xe0, 0x02, 0x48, 0x1a, 0xcd, 0xb1, 0x55,
	0x32, 0x59, 0x69, 0x74, 0x98, 0x3b, 0xe6, 0x5e,
	0x4f, 0x12, 0x99, 0xcd, 0x2a, 0x43, 0x93, 0x0c,
	0x7d, 0xe9, 0xd3, 0xc4, 0xdc, 0xb9, 0xf6, 0xc9,
	0x4f, 0x4f, 0x50, 0x47, 0x48, 0x76, 0x94, 0xd4,
	0xde, 0x4e, 0x6c, 0x08, 0xd3, 0xa7, 0x37, 0xc3,
	0xb4, 0x0a, 0x94, 0x37, 0x10, 0xc3, 0x85, 0x26,
	0x4b, 0xb3, 0xb3, 0xa4, 0x0a, 0xae, 0x1f, 0x66,
	0xd4, 0xb5, 0x4a, 0x45, 0x8a, 0x6d, 0x5f, 0x46,
	0x91, 0xb4, 0x81, 0x12, 0xaa, 0xe3, 0xef, 0x6b,
	0xbb, 0x96, 0xc0, 0x02, 0xc4, 0xd4, 0xe8, 0x59,
	0x83, 0x19, 0xba, 0xf0, 0xfc, 0x1b, 0x3b, 0xdc,
	0x89, 0x5e, 0x15, 0x59, 0xf2, 0xb5, 0xf2, 0x74,
	0x8c, 0x61, 0x99, 0x8e, 0xd1, 0x82, 0xbb, 0x7e,
	0xd4, 0x3a, 0xd4, 0xcf, 0xd1, 0x7b, 0x44, 0x95,
	0x3e, 0x57, 0x1c, 0xfc, 0x2c, 0xca, 0xf6, 0x32,
	0xcd, 0x15, 0x69, 0xd4, 0x3d, 0x3f, 0xb7, 0x26,
	0x2d, 0xa4, 0xc0, 0x23, 0xb0, 0xe1, 0x04, 0x17,
	0xed, 0xaf, 0xeb, 0x03, 0xd0, 0xdf, 0x59, 0xe7,
	0x97, 0xcf, 0xa5, 0xec, 0x58, 0xdc, 0x9c, 0xcc,
	0x10, 0xd8, 0x68, 0xf3, 0x9d, 0xee, 0x0a, 0x6a,
	0xf2, 0x97, 0x36, 0xb7, 0xf1, 0xd1, 0xba, 0x55,
	0x06, 0xfc, 0xb4, 0x2c, 0xa9, 0x93, 0x97, 0xa5,
	0xf4, 0xba, 0xd7, 0xfa, 0x34, 0xe5, 0x47, 0x0d,
	0x16, 0x06, 0xfa, 0x99, 0xf6, 0x5a, 0x56, 0xca,
	0x23, 0xaf, 0xa9, 0xae, 0x6d, 0x71, 0x2d, 0x80,
	0x30, 0x88, 0x5b, 0xc6, 0x9e, 0xd5, 0xfc, 0xff,
	0x46, 0x3a, 0xec, 0x98, 0x25, 0x85, 0x96, 0x5c,
	0xa7, 0xb3, 0x57, 0x35, 0x40, 0xfc, 0x3b, 0x46,
	0x85, 0xcb, 0x3e, 0x4c, 0x28, 0x7c, 0x16, 0x32,
	0xd4, 0xaa, 0x98, 0x60, 0xb6, 0xe0, 0x6a, 0x96,
	0x31, 0x51, 0xa7, 0x28, 0x5c, 0x46, 0xbd, 0x89,
	0x88, 0xdf, 0x19, 0x43, 0xee,
}

var serverhellodone = []byte{
	0x0e, 0x00, 0x00, 0x00,
}

var clientkeyexchange = []byte{
	0x10, 0x00, 0x01, 0x02, 0x01, 0x00, 0x7d, 0x4e,
	0x98, 0xe4, 0x80, 0xec, 0x76, 0x3b, 0xa7, 0x8b,
	0x36, 0x41, 0x3c, 0x0c, 0x13, 0x68, 0x62, 0x97,
	0xaa, 0xd7, 0x06, 0x65, 0x3f, 0x5d, 0x25, 0x82,
	0xa9, 0x6a, 0x50, 0x06, 0xb3, 0xfe, 0x0e, 0x1d,
	0x00, 0xf9, 0xf8, 0x33, 0xf3, 0x9a, 0x9d, 0x54,
	0x59, 0x56, 0x75, 0x87, 0xfc, 0xc7, 0xf0, 0x0a,
	0xad, 0x55, 0x3f, 0x0f, 0x2f, 0xf5, 0xac, 0xa7,
	0xef, 0xd1, 0x8d, 0x2e, 0xf4, 0x84, 0xca, 0xc0,
	0x00, 0xbd, 0xf8, 0xd7, 0x7b, 0x80, 0x93, 0x5b,
	0x1c, 0x70, 0x53, 0xcc, 0x83, 0x2c, 0x6d, 0x4d,
	0xcb, 0xb5, 0x1c, 0x59, 0x7d, 0x19, 0xc0, 0x21,
	0x3a, 0xbb, 0x97, 0xc0, 0x6c, 0xec, 0x27, 0xbc,
	0xd6, 0x75, 0x12, 0xf2, 0x80, 0xe1, 0x21, 0x1f,
	0x80, 0xbe, 0x40, 0x56, 0x59, 0x0a, 0x11, 0x67,
	0x9b, 0xae, 0xae, 0x64, 0xf7, 0x1a, 0xf8, 0x23,
	0x0c, 0x34, 0xce, 0x75, 0x62, 0xb1, 0x6f, 0xcd,
	0xad, 0x1d, 0x4a, 0xbf, 0xc9, 0xbe, 0x0e, 0xf4,
	0xd1, 0x0e, 0x02, 0xb9, 0xeb, 0xcf, 0xda, 0x86,
	0x2b, 0x99, 0xd2, 0x3f, 0x40, 0x7c, 0xa6, 0x2d,
	0x20, 0x55, 0xd9, 0xdf, 0x10, 0x74, 0x34, 0xa0,
	0x04, 0x6c, 0x49, 0x15, 0xaf, 0xca, 0x06, 0x7c,
	0x1a, 0x8b, 0xe4, 0x0a, 0x8e, 0xe6, 0xab, 0x49,
	0x2a, 0x78, 0xf1, 0x1e, 0x80, 0x5b, 0x8f, 0xac,
	0xaf, 0x1a, 0xd1, 0x0d, 0xda, 0xf4, 0x73, 0x4b,
	0x0b, 0x54, 0x53, 0x25, 0x2e, 0x5c, 0x23, 0x1f,
	0x94, 0x66, 0x82, 0xb3, 0x33, 0xd3, 0xa0, 0xe3,
	0x11, 0x28, 0xaa, 0x6c, 0xfc, 0x38, 0xc9, 0x7f,
	0xb6, 0xb0, 0xeb, 0x0f, 0xed, 0x04, 0xc6, 0x2b,
	0x32, 0xc4, 0xf3, 0x92, 0xe8, 0xe5, 0xa7, 0xfa,
	0xa4, 0x7c, 0x0e, 0x3c, 0x15, 0x1f, 0x50, 0x14,
	0xfe, 0xa0, 0xb3, 0x4a, 0x18, 0xfc, 0x08, 0x09,
	0x5b, 0x6a, 0xfa, 0xb1, 0x51, 0x9a,
}

// 固定のラベル
var MasterSecretLable = []byte(`master secret`)
var FinishedLabel = []byte(`client finished`)
var KeyLabel = []byte(`key expansion`)

func phash(secret, seed []byte, prfLength int) []byte {
	result := make([]byte, prfLength)
	mac := hmac.New(sha256.New, secret)
	mac.Write(seed)

	// A(1)
	a := mac.Sum(nil)
	length := 0

	// 48byteになるまで計算する
	for length < len(result) {
		mac.Reset()
		mac.Write(a)
		mac.Write(seed)
		b := mac.Sum(nil)
		copy(result[length:], b)
		length += len(b)

		mac.Reset()
		mac.Write(a)
		a = mac.Sum(nil)
	}
	return result
}

// https://www.ipa.go.jp/security/rfc/RFC5246-08JA.html#081
// ClientKeyExchangeのときに生成したpremaster secretと
// ClientHelloで送ったrandom, ServerHelloで受信したrandomをもとに48byteのmaster secretを生成する
func prf(secret, label, clientServerRandom []byte, prfLength int) []byte {
	var seed []byte
	seed = append(seed, label...)
	seed = append(seed, clientServerRandom...)
	return phash(secret, seed, prfLength)
}

func norandam(length int) []byte {
	b := make([]byte, length)
	for i := 0; i < length; i++ {
		b[i] = 0x00
	}
	return b
}

func mastersecret() {

	premaster := []byte{0x03, 0x03}
	premaster = append(premaster, norandam(46)...)

	clientRandom := norandam(32)
	serverRandom := norandam(32)

	var clientServerRandomByte []byte
	clientServerRandomByte = append(clientServerRandomByte, clientRandom...)
	clientServerRandomByte = append(clientServerRandomByte, serverRandom...)

	ms := prf(premaster, MasterSecretLable, clientServerRandomByte, 48)

	var serverclientrandomByte []byte
	serverclientrandomByte = append(serverclientrandomByte, serverRandom...)
	serverclientrandomByte = append(serverclientrandomByte, clientRandom...)

	keyblock := prf(ms, KeyLabel, serverclientrandomByte, 40)

	fmt.Printf("client_write_key is %x\n", keyblock[0:16])
	fmt.Printf("server_write_key is %x\n", keyblock[16:32])
	fmt.Printf("client_write_IV  is %x\n", keyblock[32:36])
	fmt.Printf("server_write_IV  is %x\n", keyblock[36:40])

	var hs_messages []byte
	hs_messages = append(hs_messages, clienthello...)
	hs_messages = append(hs_messages, serverHello...)
	hs_messages = append(hs_messages, serverCertificate...)
	hs_messages = append(hs_messages, serverhellodone...)
	hs_messages = append(hs_messages, clientkeyexchange...)

	hasher := sha256.New()
	hasher.Write(hs_messages)

	verify_data := prf(ms, FinishedLabel, hasher.Sum(nil), 12)
	fmt.Printf("verify_data is %x\n", verify_data)

	encrpytdata := encrpyt(keyblock[0:16], verify_data, keyblock[32:36])
	fmt.Printf("encrpytdata is %x\n", encrpytdata)

}

func encrpyt(key, plaintext, prefixnonce []byte) []byte {
	add := norandam(8)
	add = append(add, []byte{0x14, 0x00, 0x00, 0x0c}...)

	block, _ := aes.NewCipher(key)
	nonce := append(prefixnonce, norandam(8)...)
	aesgcm, _ := cipher.NewGCM(block)

	return aesgcm.Seal(nil, nonce, plaintext, add)
}

func decrypt() {
	key, _ := hex.DecodeString("475f58d5ca2aa6b36add62077ea4a340")
	ciphertext := []byte{0x51, 0x46, 0x6d, 0xdf, 0x0b, 0x80, 0xa1, 0xb9, 0xd7, 0xf3, 0x2f, 0xa8, 0x0d, 0x56, 0x24, 0x43}
	//nonce, _ := hex.DecodeString("0bcd1746")
	nonce := []byte{0x0b, 0xcd, 0x17, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	aad := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x03, 0x03, 0x00, 0x28}

	block, err := aes.NewCipher(key)
	if err != nil {
		log.Fatalf("NewCipher err : %s\n", err.Error())
	}

	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		log.Fatalf("NewGCM err : %s\n", err.Error())
	}

	plaintext, err := aesgcm.Open(nil, nonce, ciphertext, aad)
	if err != nil {
		log.Fatalf("aesgcm Open err : %s\n", err.Error())
	}

	fmt.Printf("%x\n", plaintext)
}

func main() {
	mastersecret()
	//fmt.Printf("master secret is %x\n", ms)
}

func __main() {
	certfile, err := tls.LoadX509KeyPair("./my-tls.com+2.pem", "./my-tls.com+2-key.pem")
	if err != nil {
		log.Fatal(err)
	}

	cert, err := x509.ParseCertificate(certfile.Certificate[0])
	if err != nil {
		log.Fatal(err)
	}
	_ = cert
	//fmt.Println(cert.Issuer)
	//mastersecret()
	//secret, err := rsa.DecryptPKCS1v15(rand.Reader, certfile.PrivateKey.(*rsa.PrivateKey), finishedbytes)
	//if err != nil {
	//	log.Fatalf("create premaster secret err : %v\n", err)
	//}
	//fmt.Printf("%x\n", secret)

	var protocols []byte
	protocols = append(protocols, clienthello...)
	protocols = append(protocols, serverHello...)
	protocols = append(protocols, serverCertificate...)
	protocols = append(protocols, serverhellodone...)

	hasher := sha256.New()
	hasher.Write(protocols)
	messsage := hasher.Sum(nil)
	_ = messsage

	//ms := mastersecret()
	//fmt.Printf("master_secret : %x\n", ms)
	//
	//result := prf(ms, FinishedLabel, messsage)
	////
	//fmt.Printf("verify_data : %x\n", result)

}
